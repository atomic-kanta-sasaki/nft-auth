openapi: 3.0.3
info:
  title: NFT API
  description: API documentation for the NFT system
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
paths:
  /auth/nft:
    post:
      tags:
        - auth
      summary: Verify NFT ownership
      description: Verifies if a user owns specific NFTs by checking their linked EOAs against authorized NFTs.
      operationId: verifyNFT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The ID of the user to verify.
                  example: "12345"
              required:
                - userId
      responses:
        '200':
          description: Verification result
          content:
            application/json:
              schema:
                type: array
                items: 
                  properties:
                    tokenId:
                      type: number
                      description: nft tokenId
                      example: 1
                    contractAddress:
                      type: string
                      description: nft contractAddress
                      example: "0x00000000000000001"
                    ownerAddress:
                      type: string
                      description: nft owner address
                      example: "0x00000000000000001"
                    nftType:
                      type: string
                      description:  nft type
                      enum: ["BASIC", "NONE"]
                      example: "BASIC"
                    isMatch:
                      type: boolean
                      description: user have nft
                      example: true
        '400':
          description: Bad request due to missing or invalid parameters.
        '401':
          description: Unauthorized error due to no linked EOA or missing data.
        '500':
          description: Internal server error.
  /nft/{contractAddress}/{tokenId}:
    get:
      summary: Get NFT Info
      tags:
        - nftInfo
      operationId: getNft
      parameters:
        - name: contractAddress
          in: path
          required: true
          description: The contract address of the NFT.
          schema:
            type: string
            example: "0x123abc456def789ghi"
        - name: tokenId
          in: path
          required: true
          description: The token ID of the NFT.
          schema:
            type: integer
            example: 1234
      responses:
        '200':
          description: Successfully fetched NFT Info
          content:
            application/json:
              schema:
                type: object
                properties:
                  tokenId:
                    type: number
                    description: nft tokenId
                    example: 1
                  contractAddress:
                    type: string
                    description: nft contract address
                    example: "0x00000000000000001"
                  ownerAddress:
                    type: string
                    description: nft owner eoa address
                    example: "0x00000000000000001"
                  nftType:
                      type: string
                      description:  nft type
                      enum: ["BASIC", "NONE"]
                      example: "BASIC"
        '400':
          description: Bad request due to missing or invalid parameters.
        '401':
          description: Unauthorized error due to no linked EOA or missing data.
        '500':
          description: Internal server error.
    put:
      summary: Put Nft Info
      tags:
        - nftInfo
      operationId: putNft
      parameters:
        - name: contractAddress
          in: path
          required: true
          description: The contract address of the NFT.
          schema:
            type: string
            example: "0x123abc456def789ghi"
        - name: tokenId
          in: path
          required: true
          description: The token ID of the NFT.
          schema:
            type: integer
            example: 1234
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nftType:
                  type: string
                  description:  nft type
                  enum: ["BASIC", "NONE"]
                  example: "BASIC"
      responses:
        '200':
          description: success
        '400':
          description: Bad request due to missing or invalid parameters.
        '401':
          description: Unauthorized error due to no linked EOA or missing data.
        '500':
          description: Internal server error.

  # /auth/vc:
  #   get:
  #     summary: Fetch VC details
  #     responses:
  #       '200':
  #         description: Successfully fetched VC details
  #         content:
  #           application/json:
  #             example:
  #               message: "VC details fetched successfully"

  /nft/list:
    get:
      summary: List NFTs
      tags:
        - nftInfo
      operationId: nftList
      responses:
        '200':
          description: Successfully fetched list of NFTs
          content:
            application/json:
              schema:
                type: array
                items: 
                  properties:
                    tokenId:
                      type: number
                      description: nft tokenId
                      example: 1
                    contractAddress:
                      type: string
                      description: nft contract address
                      example: "0x00000000000000001"
                    ownerAddress:
                      type: string
                      description: nft owner eoa address
                      example: "0x00000000000000001"
                    nftType:
                        type: string
                        description:  nft type
                        enum: ["BASIC", "NONE"]
                        example: "BASIC"


  # /nft/mint:
  #   post:
  #     summary: Mint a new NFT
  #     requestBody:
  #       description: NFT minting data
  #       required: true
  #       content:
  #         application/json:
  #           example:
  #             contractAddress: "0x123456789abcdef"
  #             ownerAddress: "0xabcdef123456789"
  #             nftType: "Art"
  #             metadata: {}
  #     responses:
  #       '201':
  #         description: Successfully minted NFT
  #         content:
  #           application/json:
  #             example:
  #               message: "NFT minted successfully"
  #               tokenId: "1"

  /nft/register:
    post:
      summary: Register an NFT
      tags:
        - registerNFT
      operationId: registerNft
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tokenId:
                  type: number
                  description: register nft tokenId.
                  example: 1
                contractAddress:
                  type: string
                  description: register nft contract address
                  example: "0x00000000000000001"
                nftType:
                  type: string
                  enum: ["BASIC", "NONE"]
                  example: "BASIC"
              required:
                - userId
      responses:
        '201':
          description: Successfully registered NFT
          content:
            application/json:
              example:
                message: "NFT registered successfully"
        '400':
          description: Bad request due to missing or invalid parameters.
        '401':
          description: Unauthorized error due to no linked EOA or missing data.
        '500':
          description: Internal server error.

  /nonce:
    get:
      tags:
        - nonce
      operationId: getNonce
      summary: Fetch nonce for verification
      responses:
        '200':
          description: Successfully fetched nonce
          content:
            application/json:
              schema:
                properties:
                  nonce: 
                    type: "string"
                    description: nonce
                    example: "12345"
        '400':
          description: Bad request due to missing or invalid parameters.
        '401':
          description: Unauthorized error due to no linked EOA or missing data.
        '500':
          description: Internal server error.


  /verify:
    post:
      tags:
        - registerUser
      summary: Verify SIWE message and register user
      description: Verifies a SIWE message, checks if the user is already registered, and creates a new user if not.
      operationId: verifySiwe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: The SIWE message to verify.
                  example: "sample message" # Replace with an actual SIWE message example.
                signature:
                  type: string
                  description: The signature of the SIWE message.
                  example: "0x51a9d41a4c4ddf4bca3f6e62abd41d57ed75ec454a0331324abb1df37c25043e1d1cb292e32ba48ce7698a5257dab2b46afb8ffd9e452b17cfc8c108fcbd290c1b"
                nonce:
                  type: string
                  description: The nonce associated with the SIWE message.
                  example: "abc123"
              required:
                - message
                - signature
                - nonce
      responses:
        '200':
          description: Verification success and user registration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  domain:
                    type: string
                    description: domain
                    example: "localhost:3000"
                  address: 
                    type: string
                    description: verify eoa address
                    example: "0x7ff9807C4E2f9E97eC099D0823544433c9fB3F64"
                  url:
                    type: string
                    description: host url
                    example: "http://localhost:3000"
                  version:
                    type: string
                    description: version
                    example: 1
                  nonce:
                    type: string
                    description:  nonce
                    example: "1wCE8rp5eGiL095fY"
                  issuedAt:
                    type: string
                    description: issuedAt
                    example: 24-12-09T05:04:38.084Z"
                  chainId:
                    type: number
                    description: chainId
                    example: 1
                  
        '401':
          description: Verification failed or unauthorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message explaining why verification failed.
                    example: "TODO: エラー"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message for unexpected server errors.
                    example: "Internal server error."